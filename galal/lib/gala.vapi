/* gala.vapi generated by valac 0.30.1, do not modify. */

namespace Gala {
	[CCode (cheader_filename = "gala.h")]
	public class ModalProxy : GLib.Object {
		public ModalProxy ();
		public void allow_all_keybindings ();
		public Gala.KeybindingFilter? keybinding_filter { get; owned set; }
	}
	[CCode (cheader_filename = "gala.h")]
	public abstract class Plugin : GLib.Object {
		public Plugin ();
		public abstract void destroy ();
		public abstract void initialize (Gala.WindowManager wm);
		public void track_actor (Clutter.Actor actor);
		public void untrack_actor (Clutter.Actor actor);
		public void update_region ();
		protected Meta.Rectangle[]? custom_region { get; protected set; }
		protected bool freeze_track { get; set; }
		public Meta.Rectangle[] region { get; private set; }
		public signal void region_changed ();
	}
	[CCode (cheader_filename = "gala.h")]
	public class Utils {
		public static void bell (Meta.Screen screen);
		public static Clutter.Actor create_close_button ();
		public static Gdk.Pixbuf? get_close_button_pixbuf ();
		public static Gdk.Pixbuf get_icon_for_window (Meta.Window window, int size, bool ignore_cache = false);
		public static Gdk.Pixbuf get_icon_for_xid (uint32 xid, int size, bool ignore_cache = false);
		public static uint get_n_windows (Meta.Workspace workspace);
		public static Meta.Window get_next_window (Meta.Workspace workspace, bool backward = false);
		public static Clutter.Actor? get_window_actor_snapshot (Meta.WindowActor actor, Meta.Rectangle inner_rect, Meta.Rectangle outer_rect);
		public static void request_clean_icon_cache (uint32[] xids);
	}
	[CCode (cheader_filename = "gala.h")]
	public class WindowIcon : Clutter.Texture {
		public WindowIcon (Meta.Window window, int icon_size, bool destroy_on_unmanaged = false);
		public bool destroy_on_unmanaged { get; set construct; }
		public int icon_size { get; construct; }
		public Meta.Window window { get; construct; }
	}
	[CCode (cheader_filename = "gala.h")]
	public interface ActivatableComponent : GLib.Object {
		public abstract void close ();
		public abstract bool is_opened ();
		public abstract void open (GLib.HashTable<string,GLib.Variant>? hints = null);
	}
	[CCode (cheader_filename = "gala.h")]
	public interface WindowManager : Meta.Plugin {
		public abstract bool is_modal ();
		public abstract bool modal_proxy_valid (Gala.ModalProxy proxy);
		public abstract void move_window (Meta.Window? window, Meta.MotionDirection direction);
		public abstract void perform_action (Gala.ActionType type);
		public abstract void pop_modal (Gala.ModalProxy proxy);
		public abstract Gala.ModalProxy push_modal ();
		public abstract void switch_to_next_workspace (Meta.MotionDirection direction);
		public abstract Meta.BackgroundGroup background_group { get; protected set; }
		public abstract Clutter.Stage stage { get; protected set; }
		public abstract Clutter.Actor top_window_group { get; protected set; }
		public abstract Clutter.Actor ui_group { get; protected set; }
		public abstract Clutter.Actor window_group { get; protected set; }
	}
	[CCode (cheader_filename = "gala.h")]
	public struct PluginInfo {
		public string name;
		public string author;
		public GLib.Type plugin_type;
		public Gala.PluginFunction provides;
		public Gala.LoadPriority load_priority;
		public string module_name;
	}
	[CCode (cheader_filename = "gala.h")]
	public enum ActionType {
		NONE,
		SHOW_WORKSPACE_VIEW,
		MAXIMIZE_CURRENT,
		MINIMIZE_CURRENT,
		MINIMIZE_ALL,
		OPEN_LAUNCHER,
		CUSTOM_COMMAND,
		WINDOW_OVERVIEW,
		WINDOW_OVERVIEW_ALL
	}
	[CCode (cheader_filename = "gala.h")]
	public enum LoadPriority {
		IMMEDIATE,
		DEFERRED
	}
	[CCode (cheader_filename = "gala.h")]
	public enum PluginFunction {
		ADDITION,
		WINDOW_SWITCHER,
		DESKTOP,
		WORKSPACE_VIEW,
		WINDOW_OVERVIEW
	}
	[CCode (cheader_filename = "gala.h")]
	public delegate bool KeybindingFilter (Meta.KeyBinding binding);
}
